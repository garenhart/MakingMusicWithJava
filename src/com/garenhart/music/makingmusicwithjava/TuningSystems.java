package com.garenhart.music.makingmusicwithjava;import jm.music.data.*;import jm.JMC;import jm.util.*;import jm.audio.Instrument;import static com.garenhart.music.makingmusicwithjava.HelperIO.writeAudio;/** * An example which creates a known chorale played in various tuning systems * It exploits the ability to specify audio notes by frequency. * @author Andrew Brown */// GH ??? - Not sure if this works as it was intendedpublic final class TuningSystems implements JMC{    public static void main(String[] args){        new TuningSystems();    }    public TuningSystems() {        // Batok Mikrokosmos        // soprano        int[] pitchSop = {G4,A4,B4,BF4,A5,AS5,B4,A4,BF4,AF4,G4,A4,B4,BF4,C5,CS5,            D5,CS5,B4,C5,BF4,C5,B4,A4,BF4,G4,D5,CS5,B4,C5,BF4,C5,B4,A4,BF4,G4,            REST,E4,A4,BF4,REST,E4,A4,B4,REST,E4,A4,C5,REST};        double[] rhythmSop = {Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,2.5,            Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,Q,            C,Q,Q,Q,C,Q,Q,Q,C,Q,Q,Q,2.5};        // alto        int[] pitchAlto = {G4,D4,CS4,D4,G4,D4,A3, REST, E4,DS4,CS4,REST,D4,CS4,B3,            FS4,CS4,REST,FS4,CS4,REST,FS4,CS4,REST,F3};        double[] rhythmAlto = {DC,C,DC,C,DC,C,2.5,DC,C,DC,C,DC,C,DC,C,            Q,Q,DC,Q,Q,DC,Q,Q,DC,2.5};                    //set up the instruments        //Instrument[] insts = new Instrument[4];        //for (int i=0; i<4; i++) {        //    insts[i] = new SquareLPFInst(44100);        //}        Instrument insts = new SquareLPFInst(44100);                //test        Phrase phr = new Phrase();        for (int i=0; i<56; i++) {            phr.addNote(new Note(i+24, SQ));        }        Score s = new Score(new Part(phr));        // scale frequency ratios        double[] chromatic = {1.0, 1.059, 1.122, 1.189, 1.26, 1.335, 1.414, 1.498, 1.587, 1.682, 1.782, 1.888};        double[] pythagorean = {1.0, 1.053, 1.125, 1.185, 1.265, 1.333, 1.404, 1.5, 1.58, 1.687, 1.778, 1.898};        double[] just = {1.0, 1.067, 1.125, 1.2, 1.25, 1.333, 1.406, 1.5, 1.6, 1.667, 1.8, 1.875};        double[] mean = {1.0, 1.07, 1.118, 1.196, 1.25, 1.337, 1.398, 1.496, 1.6, 1.672, 1.789, 1.869};        //create a score        Score chromaticScore = new Score("Chorale", 130);        //add the parts to the score        chromaticScore.addPart(createPart(pitchSop, rhythmSop, 0, chromatic));        chromaticScore.addPart(createPart(pitchAlto, rhythmAlto, 1, chromatic));        // render audio file        writeAudio(chromaticScore, "Tuning_Chromatic.au", insts);                //create a score        Score pythagoreanScore = new Score("Chorale", 130);        //add the parts to the score        pythagoreanScore.addPart(createPart(pitchSop, rhythmSop, 0, pythagorean));        pythagoreanScore.addPart(createPart(pitchAlto, rhythmAlto, 1, pythagorean));        // render audio file        writeAudio(s, "Tuning_Pythagorean.au", insts); //pythagoreanScore                //create a score        Score justScore = new Score("Chorale", 130);        //add the parts to the score        justScore.addPart(createPart(pitchSop, rhythmSop, 0, just));        justScore.addPart(createPart(pitchAlto, rhythmAlto, 1, just));        // render audio file        writeAudio(justScore, "Tuning_Just.au", insts);                //create a score        Score meanScore = new Score("Chorale", 130);        //add the parts to the score        meanScore.addPart(createPart(pitchSop, rhythmSop, 0, mean));        meanScore.addPart(createPart(pitchAlto, rhythmAlto, 1, mean));        // render audio file        writeAudio(meanScore, "Tuning_Mean.au", insts);    }    /*    *This method converts the pitch and rhythm data into notes    * and packs them into a part with a specifed tuneing system.    */    private Part createPart(int[] pitches, double[] rhythms, int instrument, double[] modeRatios) {        Part part = new Part("", 0); //instrument);        Phrase phrase = new Phrase();        // add notes        for (int i=0; i<pitches.length; i++) {            if (pitches[i] == REST ) {                int pitch = REST;                phrase.addNote(new Note(pitch, rhythms[i]));            } else {                int degree = pitches[i]%12; // assumes we're in C maj or A min                double octave = (int)(pitches[i] / 12 - 5) * 2.0;                if (octave == 0) octave = 1;                if (octave < 0) octave = -1 * (octave/1.0);                double pitch = FRQ[pitches[i] - degree] * modeRatios[degree] * octave;                phrase.addNote(new Note(pitch, rhythms[i]));            }        }        part.addPhrase(phrase);        return part;    }}	